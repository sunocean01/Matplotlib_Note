import matplotlib.pyplot as plt
import pandas as pd
import matplotlib as mpl
import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.cm as cm
import matplotlib.colors as mcolors
from numpy.random import multivariate_normal

'''
1.plot: 画图方法

2.labels, legend: label的设定及图例的显示
    legend()
    legend(labels)
    legend(handles, labels)
'''

#  解决中文字体显示问题
# font = {'family' : 'SimHei'};
# mpl.rc('font', **font);

import matplotlib
matplotlib.rc("font",family='DejaVu Sans')


'''测试数据'''
filep = r".\datasource\000061.csv"
data = pd.read_csv(filep,index_col=1,nrows=100,parse_dates=True)
data.sort_index(ascending=True,inplace=True)
data['week'] = data.index.isocalendar().week
# print(data.head())
# exit()

# 创建基图: fig = plt.figure(): 返回的是matplotlib.figure.Figure()的实例化对象(最大的artist),这个很重要,所以fig就有了Figure类的所有的属性和方法!!!!
fig = plt.figure(figsize=[12,8],dpi=100,facecolor='white',edgecolor='blue',linewidth=1,frameon=True)


'''bar:柱状图'''
x = data["low"][:10].tolist()
y = data["close"][:100].tolist()
z = data["high"][:100].tolist()
# print(x)
# print(y)
# print(data.index[:10])
# exit()

ax1 = fig.add_subplot(231)
# ax1.plot(data.index[:10],x)
ax1.plot(x)
ax1.tick_params(labelrotation=45)
ax1.locator_params(             #当绘制小的子图时，可能需要减少最大刻度数并使用严格的边界
                    axis='y',       #{'both', 'x', 'y'}, default: 'both': 使用对象x轴,y轴,both;
                    tight=True,     #
                    
                    #set_params参数:
                    nbins=4,        #int或“auto”，可选, 最大间隔数；比最大刻度数少一个。如果字符串'auto'，箱子的数量将根据轴的长度自动确定。
                    # steps=[2, 4，8, 10],         #类似数组，可选:以1开头，以10结尾的漂亮数字序列；例如， [1, 2, 4，5, 10] ，其中值为可接受的刻度倍数。例如，20、40、60是一组可接受的刻度，0.4、0.6、0.8也是一组可接受的刻度，因为它们是2的倍数。但是，不允许30、60、90，因为步骤列表中不显示3。
                    integer=True,           #bool，默认值：False:如果为真，则记号将只接受整数值，至少提供 min_n_ticks 在视图限制内找到整数。
                    symmetric=False,     #bool，默认值：False:如果为真，自动缩放将导致一个与零对称的范围。
                    prune='lower',             #{'lower'，'upper'，'both'，None}，默认值：None:删除边刻度--用于堆叠或组合绘图，其中一个轴的上刻度与上面的轴的下刻度重叠，主要是在 rcParams["axes.autolimit_mode"] (default: 'data') 是 'round_numbers' . 如果 prune=='lower' ，将删除最小的勾号。如果 prune == 'upper' ，将删除最大的勾号。如果 prune == 'both' ，将删除最大和最小的刻度。如果 修剪 是 None ，不会删除任何刻度。
                    min_n_ticks=6,          #Relax nbins and integer constraints if necessary to obtain this minimum number of ticks.
                    )
ax1.loglog(         #返回值:list of Line2D
           base=10,         #float, default: 10
           # subs=,           #sequence, optional:The location of the minor ticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_xscale/Axes.set_yscale for details.
           # nonpositive='clip',        #{'mask', 'clip'}, default: 'mask':非正值可以被伪装成无效值，或者被剪裁成非常小的正数。
           )




ax3 = fig.add_subplot(233)
ax3.plot(x)
ax3.margins(x=1,y=0.5,tight=True)     #调节图在axes上面的页边距, 将图放大缩小
ax3.minorticks_on()     #是否显示次刻度,不是次坐标哦minorticks_off()

ax4 = fig.add_subplot(234)
a = ([1,3,5,2,6,3,6,8],[4,9,5,4,6,2,0,5])
ax4.matshow(
            a,
            #imshow参数
            )


ax5 = fig.add_subplot(235)
ax5.pie(
        x=[2,8,5,6],      #1D array-like, 楔子尺寸
        explode=(0,0.1,0,0),    #每个楔片的偏移量=系数x楔片半径
        labels=["wedge1","wedge2","wedge3","wedge4"],   #给楔片添加标签
        colors=['r','orange','b','y'],  #类似数组:饼图循环的一系列颜色。如果 None ，将使用当前活动周期中的颜色
        autopct="tst",           #None或str或callable，默认值：None:如果没有 None ，是一个字符串或函数，用于用其数值标记楔体。标签将放在楔形物内。如果是格式字符串，则标签将 fmt % pct . 如果它是一个函数，则将调用它。
        pctdistance=0.2,           #The ratio between the center of each pie slice and the start of the text generated by autopct. Ignored if autopct is None.
        
        
        )


ax6 = fig.add_subplot(236)

# for dt in data.groupby('week'):
    # # ax6.cla()                       #让数据不在同一个图上累积
    # ax6.plot(dt[1]['open'].tolist())
    # plt.pause(0.5)

for dt in data.groupby('week'):
    ax6.cla()                       #让数据不在同一个图上累积
    dt[1]['open'].plot()
    ax6.set_title("week{}".format(dt[0]))
    plt.pause(0.5)          #运行GUI事件循环 间隔 秒。如果有活动的图形，它将在暂停前更新和显示，并且在暂停期间运行GUI事件循环（如果有）。




plt.show()